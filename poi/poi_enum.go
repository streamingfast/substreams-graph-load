// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package poi

import (
	"fmt"
	"strings"
)

const (
	// VersionLegacy is a Version of type Legacy.
	VersionLegacy Version = iota
	// VersionFast is a Version of type Fast.
	VersionFast
)

var ErrInvalidVersion = fmt.Errorf("not a valid Version, try [%s]", strings.Join(_VersionNames, ", "))

const _VersionName = "LegacyFast"

var _VersionNames = []string{
	_VersionName[0:6],
	_VersionName[6:10],
}

// VersionNames returns a list of possible string values of Version.
func VersionNames() []string {
	tmp := make([]string, len(_VersionNames))
	copy(tmp, _VersionNames)
	return tmp
}

var _VersionMap = map[Version]string{
	VersionLegacy: _VersionName[0:6],
	VersionFast:   _VersionName[6:10],
}

// String implements the Stringer interface.
func (x Version) String() string {
	if str, ok := _VersionMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Version(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Version) IsValid() bool {
	_, ok := _VersionMap[x]
	return ok
}

var _VersionValue = map[string]Version{
	_VersionName[0:6]:                   VersionLegacy,
	strings.ToLower(_VersionName[0:6]):  VersionLegacy,
	_VersionName[6:10]:                  VersionFast,
	strings.ToLower(_VersionName[6:10]): VersionFast,
}

// ParseVersion attempts to convert a string to a Version.
func ParseVersion(name string) (Version, error) {
	if x, ok := _VersionValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _VersionValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return Version(0), fmt.Errorf("%s is %w", name, ErrInvalidVersion)
}

// MarshalText implements the text marshaller method.
func (x Version) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Version) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseVersion(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
